[core]
	excludesfile = ~/.gitignore_global
	compress = 6
[diff]
	tool = vimdiff

[user]
	name = Fabrizio (Misto) Milo
	email = mistobaan@gmail.com

[github]
	user = mistobaan@gmail.com

# http://www.araxis.com/merge/documentation-windows/integrating-with-other-applications.en#msysGit	

[init]
    templatedir = ~/.git_template

[diff]
    tool = araxis

[difftool "araxis"]
    path = /Applications/Araxis Merge.app/Contents/Utilities/compare

[merge]
    tool = araxis

    # Include the summary of merged commits into all newly created merge
    # commits. The newly created merge commit will contain a one-line summary
    # of every (well, most) merged commits.
    log = true

    # Show merge statistics after merge.
    stat = true

    # Show Progress
    progress = true

[mergetool "araxis"]
    path = /Applications/Araxis Merge.app/Contents/Utilities/compare


[branch "develop"]
    mergeoptions=--no-ff    
	
[color]
	ui = auto
	diff = auto
	status = auto
	branch = auto
	interactive = auto

[alias] 
    a = add
    am = commit --amend
    aaa = add --all
    aa = add -u

    b = branch
    ba = branch --all
    ci = commit
    cm = commit -m
    co = checkout
    # ctags
    ctags = !.git/hooks/ctags

    # diff
    d = diff -C
    di = diff -C -w
    dc = diff --cached
    ds = diff --cached -C --stat=160,120
    dh1 = diff HEAD~1
    dw  = diff  -C -w
    ds  = diff  -C --stat
    dsp = diff  -C --stat -p
    dcw = diff  -C --word-diff
    dt = difftool
    # list  conflicts
    lsc = !git diff -C --name-only --diff-filter=U 

    # show the parent of the current branch
    dm = log --merge -p

    f = fetch
    fa = fetch --all
    st = status -s -b -u

    l = log --abbrev-commit --graph  --date=relative --pretty="format:'%C(yellow)%h%Creset %Cgreen(%ar)%Creset %C(bold blue)< %an> %Creset %Cred%d%Creset %s'" --decorate 
    la = !git l --all
    ll = !git l --pretty="format:'%C(yellow)%h%Creset %Cgreen(%ar)%Creset %C(bold blue)< %an> %Creset %Cred%d%Creset %s'" --stat --summary
    # this is the most commonly used one, it turns out!
    l19 = !git l -19
    # and this one can be a real lifesaver on a complex tree
    lsd = log   --graph --pretty="format:'%C(yellow)%h%Creset %Cgreen(%ar)%Creset %C(bold blue)< %an> %Creset %Cred%d%Creset %s'" --all --simplify-by-decoration
    # log left-right; requires argument like A...B (3 dots)
    lglr= log  --graph  --pretty="format:'%C(yellow)%h%Creset %Cgreen(%ar)%Creset %C(bold blue)< %an> %Creset %Cred%d%Creset %s'" --boundary --left-right --cherry-pick

    ls = ls-files 

    # list files non added
    lsu = ls-files --other --exclude-standard
    # list files ignored
    lsi = ls-files --other --exclude-standard -if

    head = !git l -1 
    h = !git head
    hp = git show -p --pretty=oneline
    r = !git l -20
    ra = !git r --all    
    ref = reflog show --date=relative
    refnow = reflog show --date=relative --since='1 hour'
    ff = merge --ff-only
    pullff = pull --ff-only
    noff = merge --no-ff

    sl  = stash list
    sp  = stash pop
    ss  = stash save
    # "show-branch -g=N" can't be aliased for N easily, so we stop here:
    sb  = show-branch
    # pg sbt master pu -- if the last line is 'master' and not 'master^'
    # or 'master~N' then pu is a descendent of master
    sbt = show-branch --topics
    sbs = show-branch --sha1-name

    graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format: %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

    wtf = whatchanged --pretty="format:'%C(yellow)%h%Creset %Cgreen(%ar)%Creset %C(bold blue)< %an> %Creset %Cred%d%Creset %s'" -p
    wtf1 = !git wtf -n 1

    gofmt = !gofmt -w `git diff --name-only --cached --diff-filter=AM | grep \"\\.go$\"`

[credential]
	helper = osxkeychain

[mergetool]
	keepBackup = true
[difftool]
	prompt = false
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
[push]
	default = matching
